HUD form integration plan
=========================

Goal
----
Keep the HUD simple: have PHP content snippets echo valid HTML, let the HUD JS load them into the DOM, intercept any forms inside the HUD content, submit them via fetch (credentials included), and then reload the same snippet so server-rendered results replace the content.

Checklist
---------
- Intercept form submit events inside the HUD content area.
- Serialize form data properly (FormData for file uploads, urlencoded otherwise).
- Use fetch with credentials: 'include' so session cookies travel.
- Replace content area HTML with server response and re-bind handlers.
- Avoid executing arbitrary external <script src=> automatically; prefer delegated listeners or server-registered global hooks.

Implementation steps (minimal)
-----------------------------
1. Add a small helper in `src/js/hud_interface.js` named `attachFormHandlers(container)` that:
   - finds forms in `container`, guards against double-binding, and attaches a submit handler.
   - prepares payload: FormData if file inputs exist, otherwise URL-encoded string.
   - for GET: append params to action and call existing `loadContent(url, title, { method: 'GET' })`.
   - for POST: fetch the action URL, include credentials, and on success set `container.innerHTML = responseText` then call `attachFormHandlers(container)` again.

2. Call `attachFormHandlers(contentFrame)` immediately after each `contentFrame.innerHTML = text;` in `loadContent()` so newly loaded forms become interactive.

3. Keep `loadContent()` fetch options using `credentials: 'include'` (it already does) so server session works normally and PHP sees `$_POST` / `$_FILES`.

Notes & caveats
---------------
- Server-side code (profile.php, etc.) receives regular POST/GET data when fetched and can rely on `$_SESSION` and `$_POST` as usual. No special session-endpoint is required for this flow.
- innerHTML does not execute external scripts automatically. Options:
  - Have included pages avoid relying on inline <script> execution; use delegated event listeners or call global registration functions after insert (e.g., server prints a small inline snippet that calls `window.hudRegister()` with hooks).
  - If executing arbitrary script resources from included pages is required, consider switching to an iframe approach for that page.
- Keep error handling minimal but visible (small error box in content area). Log useful responses to browser console during development.

Testing
-------
1. Create a simple PHP snippet with a form (text input + submit) that echoes submitted values and a small inline script that registers a button handler via a global function (optional).
2. Load it from the HUD, submit the form, verify the HUD content updates and the server sees $_POST (check by echoing values).
3. Test file uploads to ensure FormData path works.
4. Test session usage: set a value in $_SESSION on submit and reload the snippet to verify session persistence across requests.

Next steps (optional enhancements)
---------------------------------
- If you prefer using $_SESSION instructions instead of POST bodies, add a tiny endpoint to set an instruction object in $_SESSION and then navigate or reload (this is slightly more complex and can be added later).
- Add a small visual spinner during requests and graceful error messages on failure.
- Add unit or integration tests (PHP test script) that POST to endpoints and assert expected HTML output.

Where to pick this up
---------------------
- I can (on your signal) add `attachFormHandlers()` into `src/js/hud_interface.js` and wire it to `loadContent()` so the HUD automatically handles forms. I will keep changes minimal and isolated.

End of plan.
